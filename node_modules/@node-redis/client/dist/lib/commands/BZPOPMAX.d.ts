<<<<<<< HEAD
import { RedisCommandArgument, RedisCommandArguments } from '.';
import { ZMember } from './generic-transformers';
export declare const FIRST_KEY_INDEX = 1;
export declare function transformArguments(key: RedisCommandArgument | Array<RedisCommandArgument>, timeout: number): RedisCommandArguments;
declare type ZMemberRawReply = [key: RedisCommandArgument, value: RedisCommandArgument, score: RedisCommandArgument] | null;
declare type BZPopMaxReply = (ZMember & {
    key: RedisCommandArgument;
}) | null;
export declare function transformReply(reply: ZMemberRawReply): BZPopMaxReply | null;
=======
import { RedisCommandArguments } from '.';
import { ZMember } from './generic-transformers';
export declare const FIRST_KEY_INDEX = 1;
export declare function transformArguments(key: string | Array<string>, timeout: number): RedisCommandArguments;
interface ZMemberWithKey extends ZMember {
    key: string;
}
declare type BZPopMaxReply = ZMemberWithKey | null;
export declare function transformReply(reply: [key: string, value: string, score: string] | null): BZPopMaxReply | null;
>>>>>>> 5655adf32f80401ccc6f0e1066a0d938e82e3bba
export {};
